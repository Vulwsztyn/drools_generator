{"version":3,"sources":["components/editable-item/index.js","components/editable-item/editable-item.js","components/tree-node/index.js","components/tree-node/tree-node.js","components/add-button/index.js","components/add-button/add-button.js","components/control-panel/index.js","components/control-panel/control-panel.js","components/tree/index.js","components/tree/tree.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["EditableItem","props","title","changeTitle","removeNode","addChild","react_default","a","createElement","className","onClick","onChange","e","target","value","placeholder","TreeNode","_ref","children","otherProps","Object","objectWithoutProperties","hasChildren","undefined","components_editable_item","map","nodeProps","id","others","assign","key","renderChildren","AddButton","ControlPanel","hasSaved","saveState","loadState","Tree","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nodes","initialized–°opy","data","savedNodes","bind","assertThisInitialized","addRootElement","onTextChange","nodesToString","location","nodesCopy","i","length","_nodes$i","concat","_this2","newTitle","split","str","parseInt","changingNode","setState","newNode","toConsumableArray","_this3","join","_this4","newNodes","slice","index","newChildren","simplify","text","element","document","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","downloadTxtFile","mapShit","nadpytanie","arguments","node","filter","trim","odpowiedzi","self","indexOf","console","log","pytanie","rootQuestion","odpowiedz","question","polecane","answer","JSON","stringify","parse","_nodes$i2","_this$state","style","display","justifyContent","alignItems","height","components_control_panel","components_tree_node","components_add_button","Component","DEFAULT_NODES","App","components_tree","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6aaae648.chunk.js","sourcesContent":["import EditableItem from \"./editable-item\";\nexport default EditableItem;","import React from \"react\";\nimport \"./editable-item.css\";\n\nconst EditableItem = (props) => {\n    const { title, changeTitle, removeNode, addChild } = props;\n\n    return (\n        <div className=\"EditableItem\">\n        \n            <button\n               className=\"EditableItem-Button EditableItem-Button_add\"\n               onClick={addChild}>\n                 +\n            </button>\n\n            <button\n              className=\"EditableItem-Button EditableItem-Button_remove\" \n              onClick={removeNode}>\n                x\n            </button>\n            \n            <input\n              className=\"EditableItem-Text\"\n              onChange={(e) => { changeTitle(e.target.value) }}\n              value={title}\n              placeholder=\"New Item\"\n            />\n\n        </div>\n    );\n}\n\nexport default EditableItem;","import TreeNode from \"./tree-node\";\nexport default TreeNode;","import React from \"react\";\nimport EditableItem from \"../editable-item\";\nimport \"./tree-node.css\";\n\nconst TreeNode = ({ children, ...otherProps }) => {\n    const hasChildren = children !== undefined;\n\n    const renderChildren = (children) => {\n        return (\n            <ul>\n                { children.map((nodeProps) => {\n                    const { id, ...others } = nodeProps;\n                    return (\n                        <TreeNode \n                          key={id}\n                          {...others}\n                        />\n                    );\n                }) }\n            </ul>\n        );\n    }        \n\n    return (\n        <li>\n            <div className=\"TreeNode\">\n                <EditableItem {...otherProps} />\n            </div>\n            {hasChildren && renderChildren(children)}\n        </li>\n    );\n}\n\nexport default TreeNode;","import AddButton from \"./add-button\";\nexport default AddButton;","import React from \"react\";\nimport \"./add-button.css\";\n\nconst AddButton = ( {onClick} ) => {\n    return (\n      <div className=\"AddButton\">\n          <button \n            className=\"AddButton-Inner\" \n            onClick={onClick}\n            value>\n            +\n          </button>\n      </div>\n    );   \n}\n\nexport default AddButton;","import ControlPanel from \"./control-panel\";\nexport default ControlPanel;","import React from \"react\";\nimport \"./control-panel.css\";\n\nconst ControlPanel = (props) => {\n    const { hasSaved, saveState, loadState } = props;\n    const renderLoadButton = () => {\n        if (hasSaved) {\n            return (\n                <button className=\"ControlPanel-Button ControlPanel-Button_load\" \n                  onClick={loadState}>\n                    Load\n                </button>\n            );\n        }\n        return null;\n    }\n\n    return (\n        <div className=\"ControlPanel\">\n            <button className=\"ControlPanel-Button ControlPanel-Button_save\" \n              onClick={saveState}>\n                Save\n            </button>\n            { renderLoadButton() }\n        </div>\n    );\n\n}\n\nexport default ControlPanel;","import Tree from \"./tree\";\nexport default Tree;","import React, { Component } from 'react'\nimport TreeNode from '../tree-node'\nimport AddButton from '../add-button'\nimport ControlPanel from '../control-panel'\nimport TextView from '../text-view'\nimport './tree.css'\n\nclass Tree extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      nodes: this.initialized–°opy(this.props.data),\n      savedNodes: [],\n    }\n    this.changeTitle = this.changeTitle.bind(this)\n    this.addRootElement = this.addRootElement.bind(this)\n    this.addChild = this.addChild.bind(this)\n    this.removeNode = this.removeNode.bind(this)\n    this.saveState = this.saveState.bind(this)\n    this.loadState = this.loadState.bind(this)\n    this.onTextChange = this.onTextChange.bind(this)\n    this.nodesToString = this.nodesToString.bind(this)\n  }\n\n  initialized–°opy(nodes, location) {\n    const nodesCopy = []\n    for (let i = 0; i < nodes.length; i++) {\n      const { children, title } = nodes[i]\n      const hasChildren = children !== undefined\n      const id = location ? `${location}.${i + 1}` : `${i + 1}`\n      nodesCopy[i] = {\n        children: hasChildren ? this.initialized–°opy(children, id) : undefined,\n        changeTitle: this.changeTitle(id),\n        removeNode: this.removeNode(id),\n        addChild: this.addChild(id),\n        id,\n        title,\n      }\n    }\n    return nodesCopy\n  }\n\n  changeTitle(id) {\n    return (newTitle) => {\n      id = id.split('.').map((str) => parseInt(str))\n      const nodes = this.initialized–°opy(this.state.nodes)\n      let changingNode = nodes[id[0] - 1]\n\n      if (id.length > 1) {\n        for (let i = 1; i < id.length; i++) {\n          changingNode = changingNode.children[id[i] - 1]\n        }\n      }\n\n      changingNode.title = newTitle\n      this.setState({ nodes })\n    }\n  }\n\n  addRootElement() {\n    const id = this.state.nodes.length ? `${this.state.nodes.length + 1}` : '1'\n    const newNode = {\n      children: undefined,\n      changeTitle: this.changeTitle(id),\n      removeNode: this.removeNode(id),\n      addChild: this.addChild(id),\n      id,\n      title: '',\n    }\n\n    const nodes = [...this.state.nodes, newNode]\n    this.setState({ nodes })\n  }\n\n  addChild(id) {\n    return () => {\n      id = id.split('.').map((str) => parseInt(str))\n      const nodes = this.initialized–°opy(this.state.nodes)\n      let changingNode = nodes[id[0] - 1]\n\n      if (id.length > 1) {\n        for (let i = 1; i < id.length; i++) {\n          changingNode = changingNode.children[id[i] - 1]\n        }\n      }\n\n      if (changingNode.children === undefined) {\n        changingNode.children = []\n      }\n\n      id = `${id.join('.')}.${changingNode.children.length + 1}`\n\n      changingNode.children = [\n        ...changingNode.children,\n        {\n          children: undefined,\n          changeTitle: this.changeTitle(id),\n          removeNode: this.removeNode(id),\n          addChild: this.addChild(id),\n          id,\n          title: '',\n        },\n      ]\n\n      this.setState({ nodes })\n    }\n  }\n\n  removeNode(id) {\n    return () => {\n      id = id.split('.').map((str) => parseInt(str))\n      const nodes = this.initialized–°opy(this.state.nodes)\n\n      if (id.length === 1) {\n        const newNodes = [...nodes.slice(0, [id[0] - 1]), ...nodes.slice(id[0])]\n\n        this.setState({ nodes: this.initialized–°opy(newNodes) })\n      } else {\n        let changingNode = nodes[id[0] - 1]\n\n        for (let i = 2; i < id.length; i++) {\n          changingNode = changingNode.children[id[i - 1] - 1]\n        }\n\n        const index = id[id.length - 1] - 1\n\n        const newChildren = [...changingNode.children.slice(0, index), ...changingNode.children.slice(index + 1)]\n        changingNode.children = newChildren\n\n        this.setState({ nodes: this.initialized–°opy(nodes) })\n      }\n    }\n  }\n\n  saveState() {\n    const nodes = this.simplify(this.state.nodes)\n\n    const rootQuestion = (pytanie, odpowiedzi) => `rule \"${pytanie}\"\n    when\n    then\n    ArrayList<String> warianty = new ArrayList<>();${odpowiedzi.map((e) => `\\n    warianty.add(\"${e}\");`).join('')}\n    Odpowiedz odpowiedz = zapytaj(frame, kcontext.getKieRuntime(), \"${pytanie}\", warianty);\n    insert (odpowiedz);\nend\\n\\n`\n    const question = (nadpytanie, odpowiedz, pytanie, odpowiedzi) => `rule \"${nadpytanie} - ${odpowiedz} - ${pytanie}\"\n    when\n    Odpowiedz(pytanie == \"${nadpytanie}\" && odpowiedz == \"${odpowiedz}\")\n    then\n    ArrayList<String> warianty = new ArrayList<>();${odpowiedzi.map((e) => `\\n    warianty.add(\"${e}\");`).join('')}\n    Odpowiedz odpowiedz = zapytaj(frame, kcontext.getKieRuntime(), \"${pytanie}\", warianty);\n    insert (odpowiedz);\nend\\n\\n`\n    const answer = (nadpytanie, odpowiedz, polecane) => `rule \"${nadpytanie} - ${odpowiedz} - ${polecane}\"\n    when\n    Odpowiedz(pytanie == \"${nadpytanie}\" && odpowiedz == \"${odpowiedz}\")\n    then\n    polec(frame, kcontext.getKieRuntime(), \"${polecane}\");\nend\\n\\n`\n    const mapShit = (nadpytanie = null) => (node) => {\n      const children = node.children ? node.children.filter((e) => e.title.length > 0) : []\n      const split = node.title.split('-').map((e) => e.trim())\n      const odpowiedzi = children\n        .map((e) => e.title.split('-')[0].trim())\n        .filter((value, index, self) => self.indexOf(value) === index)\n      console.log(node.title, split)\n      return nadpytanie == null\n        ? rootQuestion(split[0], odpowiedzi) + children.map((e) => mapShit(split[0])(e)).join('\\n')\n        : children.length > 0\n        ? question(nadpytanie, split[0], split[1], odpowiedzi) + children.map((e) => mapShit(split[1])(e)).join('\\n')\n        : answer(nadpytanie, split[0], split[1])\n    }\n    const mapped =\n      `package com.sample\nimport javax.swing.JOptionPane\nimport javax.swing.JFrame\nimport org.kie.api.runtime.KieRuntime\nimport javax.swing.JRadioButton\nimport javax.swing.JPanel\nglobal JFrame frame\nglobal javax.swing.JTextArea textArea\nimport java.util.ArrayList\nimport java.util.List\nimport java.util.Arrays;\nimport java.util.ArrayList\nimport javax.swing.JLabel;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport com.sample.Odpowiedz;\n    ` +\n      nodes.map((e) => mapShit()(e)).join('\\n') +\n      `function void polec(JFrame frame, KieRuntime krt, String polecane) {\n    final JPanel panel = new JPanel();\n    String text = polecane;\n    panel.add(new JLabel(text));\n    JOptionPane.showMessageDialog(frame, panel);\n}\n\nfunction Odpowiedz zapytaj(JFrame frame, KieRuntime krt, String trescPytania, ArrayList odpowiedzi) {\n\n    class Sluchacz implements ItemListener {\n        private Odpowiedz odpowiedz;\n        private String chosen;\n        public Sluchacz(Odpowiedz odp, String wybrana) {\n            this.odpowiedz = odp;\n            this.chosen = wybrana;\n        }\n\n        @Override\n        public void itemStateChanged(ItemEvent event) {\n            if (event.getStateChange() == ItemEvent.SELECTED) {\n                odpowiedz.setOdpowiedz(chosen);\n            }\n        }\n    }\n    Odpowiedz odpowiedz = new Odpowiedz(trescPytania, (String) odpowiedzi.get(0));\n\n    final JPanel panel = new JPanel(new GridLayout(0, 1));\n    panel.add(new JLabel(trescPytania));\n\n    ArrayList < JRadioButton > listaButtonow = new ArrayList < > ();\n\n    for (int i = 0; i < odpowiedzi.size(); i++) {\n        String text = (String) odpowiedzi.get(i);\n        JRadioButton nowy = new JRadioButton(text);\n        Sluchacz nowySluchacz = new Sluchacz(odpowiedz, text);\n        nowy.addItemListener(nowySluchacz);\n        listaButtonow.add(nowy);\n    }\n\n    listaButtonow.get(0).setSelected(true);\n    odpowiedz.setOdpowiedz((String) odpowiedzi.get(0));\n\n    ButtonGroup group = new ButtonGroup();\n    for (int i = 0; i < listaButtonow.size(); i++) {\n        group.add(listaButtonow.get(i));\n        panel.add(listaButtonow.get(i));\n    }\n    Object[] options = {\n        \"Proceed\"\n    };\n    if (JOptionPane.showConfirmDialog(frame, panel, \"Question\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE) < 0) {\n        odpowiedz.setOdpowiedz(\"Zakoncz program\");\n    }\n\n    return odpowiedz;\n}`\n\n    const downloadTxtFile = (text) => {\n      const element = document.createElement('a')\n      const file = new Blob([text], { type: 'text/plain' })\n      element.href = URL.createObjectURL(file)\n      element.download = 'rules.drl'\n      document.body.appendChild(element) // Required for this to work in FireFox\n      element.click()\n    }\n    downloadTxtFile(mapped)\n    console.log(nodes)\n    console.log(JSON.stringify(this.simplify(this.state.nodes), undefined, 2))\n    this.setState({ savedNodes: this.initialized–°opy(this.state.nodes) })\n  }\n\n  loadState() {\n    this.setState({ nodes: this.initialized–°opy(this.state.savedNodes) })\n  }\n\n  onTextChange(e) {\n    this.setState({ nodes: this.initialized–°opy(JSON.parse(e.target.value)) })\n  }\n\n  nodesToString() {\n    return JSON.stringify(this.simplify(this.state.nodes), undefined, 2)\n  }\n\n  simplify(nodes) {\n    const nodesCopy = []\n    for (let i = 0; i < nodes.length; i++) {\n      const { children, title } = nodes[i]\n      const hasChildren = children !== undefined && children.length > 0\n      nodesCopy[i] = {\n        title,\n        children: hasChildren ? this.simplify(children) : undefined,\n      }\n    }\n    return nodesCopy\n  }\n\n  render() {\n    const { nodes, savedNodes } = this.state\n    const { addRootElement, saveState, loadState, onTextChange, nodesToString } = this\n    const hasSaved = savedNodes.length !== 0\n\n    return (\n      <div>\n        {/* // <div className=\"Tree\"> */}\n\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n          <ControlPanel {...{ hasSaved, saveState, loadState }} />\n          <ul className='Nodes'>\n            {nodes.map((nodeProps) => {\n              const { id, ...others } = nodeProps\n              return <TreeNode key={id} {...others} />\n            })}\n          </ul>\n          <AddButton onClick={addRootElement} />\n        </div>\n\n        {/* <div className=\"Tree-RightSide\">\n                   <TextView\n                     value={nodesToString()}\n                     onChange={onTextChange}\n                   />\n               </div> */}\n      </div>\n    )\n  }\n}\n\nexport default Tree\n","export const DEFAULT_NODES = [\n  {\n    title: 'Czy masz konto na githubie?',\n    children: [\n      {\n        title: 'Nie - To za≈Ç√≥≈º. Prƒôdzej, czy p√≥≈∫niej siƒô przyda.',\n      },\n      {\n        title: 'Tak - Czy pogwiazdkowa≈Çe≈õ mi repo?',\n        children: [\n          {\n            title: 'Tak - Dziena, <3',\n          },\n          {\n            title: 'Nie - :(',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Czy Artur Mi. jest dobrym prowadzƒÖcym?',\n    children: [\n      {\n        title: 'Nie - No, ba.',\n      },\n      {\n        title: 'Nie - I nie on jeden.',\n      },\n    ],\n  },\n]\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Tree from \"./components/tree\";\nimport { DEFAULT_NODES } from \"./constants\";\n\nclass App extends Component {\n\n    render() {      \n    return (\n      <Tree data={DEFAULT_NODES}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}